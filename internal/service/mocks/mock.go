// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	domain "gophkeeper/internal/domain"
	service "gophkeeper/internal/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// RefreshTokens mocks base method.
func (m *MockUsers) RefreshTokens(ctx context.Context, token string) (domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, token)
	ret0, _ := ret[0].(domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUsersMockRecorder) RefreshTokens(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUsers)(nil).RefreshTokens), ctx, token)
}

// SignIn mocks base method.
func (m *MockUsers) SignIn(ctx context.Context, input service.UserSignInInput) (domain.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, input)
	ret0, _ := ret[0].(domain.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUsersMockRecorder) SignIn(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUsers)(nil).SignIn), ctx, input)
}

// SignUp mocks base method.
func (m *MockUsers) SignUp(ctx context.Context, input service.UserSignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUsersMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUsers)(nil).SignUp), ctx, input)
}

// MockMaterials is a mock of Materials interface.
type MockMaterials struct {
	ctrl     *gomock.Controller
	recorder *MockMaterialsMockRecorder
}

// MockMaterialsMockRecorder is the mock recorder for MockMaterials.
type MockMaterialsMockRecorder struct {
	mock *MockMaterials
}

// NewMockMaterials creates a new mock instance.
func NewMockMaterials(ctrl *gomock.Controller) *MockMaterials {
	mock := &MockMaterials{ctrl: ctrl}
	mock.recorder = &MockMaterialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaterials) EXPECT() *MockMaterialsMockRecorder {
	return m.recorder
}

// CreateNewCardData mocks base method.
func (m *MockMaterials) CreateNewCardData(ctx context.Context, id int, data domain.CardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCardData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewCardData indicates an expected call of CreateNewCardData.
func (mr *MockMaterialsMockRecorder) CreateNewCardData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCardData", reflect.TypeOf((*MockMaterials)(nil).CreateNewCardData), ctx, id, data)
}

// CreateNewCredData mocks base method.
func (m *MockMaterials) CreateNewCredData(ctx context.Context, id int, data domain.CredData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCredData", ctx, id, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewCredData indicates an expected call of CreateNewCredData.
func (mr *MockMaterialsMockRecorder) CreateNewCredData(ctx, id, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCredData", reflect.TypeOf((*MockMaterials)(nil).CreateNewCredData), ctx, id, data)
}

// CreateNewTextData mocks base method.
func (m *MockMaterials) CreateNewTextData(ctx context.Context, userID int, data domain.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewTextData", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewTextData indicates an expected call of CreateNewTextData.
func (mr *MockMaterialsMockRecorder) CreateNewTextData(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewTextData", reflect.TypeOf((*MockMaterials)(nil).CreateNewTextData), ctx, userID, data)
}

// GetAllCardData mocks base method.
func (m *MockMaterials) GetAllCardData(ctx context.Context, userID int) ([]domain.CardData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCardData", ctx, userID)
	ret0, _ := ret[0].([]domain.CardData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCardData indicates an expected call of GetAllCardData.
func (mr *MockMaterialsMockRecorder) GetAllCardData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCardData", reflect.TypeOf((*MockMaterials)(nil).GetAllCardData), ctx, userID)
}

// GetAllCredData mocks base method.
func (m *MockMaterials) GetAllCredData(ctx context.Context, userID int) ([]domain.CredData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCredData", ctx, userID)
	ret0, _ := ret[0].([]domain.CredData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCredData indicates an expected call of GetAllCredData.
func (mr *MockMaterialsMockRecorder) GetAllCredData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCredData", reflect.TypeOf((*MockMaterials)(nil).GetAllCredData), ctx, userID)
}

// GetAllTextData mocks base method.
func (m *MockMaterials) GetAllTextData(ctx context.Context, userID int) ([]domain.TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTextData", ctx, userID)
	ret0, _ := ret[0].([]domain.TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTextData indicates an expected call of GetAllTextData.
func (mr *MockMaterialsMockRecorder) GetAllTextData(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTextData", reflect.TypeOf((*MockMaterials)(nil).GetAllTextData), ctx, userID)
}

// UpdateCardDataByID mocks base method.
func (m *MockMaterials) UpdateCardDataByID(ctx context.Context, userID int, data domain.CardData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCardDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCardDataByID indicates an expected call of UpdateCardDataByID.
func (mr *MockMaterialsMockRecorder) UpdateCardDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCardDataByID", reflect.TypeOf((*MockMaterials)(nil).UpdateCardDataByID), ctx, userID, data)
}

// UpdateCredDataByID mocks base method.
func (m *MockMaterials) UpdateCredDataByID(ctx context.Context, userID int, data domain.CredData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCredDataByID indicates an expected call of UpdateCredDataByID.
func (mr *MockMaterialsMockRecorder) UpdateCredDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredDataByID", reflect.TypeOf((*MockMaterials)(nil).UpdateCredDataByID), ctx, userID, data)
}

// UpdateTextDataByID mocks base method.
func (m *MockMaterials) UpdateTextDataByID(ctx context.Context, userID int, data domain.TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTextDataByID", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTextDataByID indicates an expected call of UpdateTextDataByID.
func (mr *MockMaterialsMockRecorder) UpdateTextDataByID(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTextDataByID", reflect.TypeOf((*MockMaterials)(nil).UpdateTextDataByID), ctx, userID, data)
}
